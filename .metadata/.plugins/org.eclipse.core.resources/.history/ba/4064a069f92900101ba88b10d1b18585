package com.bank.transfer_microservice.service;

import com.bank.transfer_microservice.model.Transfer;
import com.bank.transfer_microservice.repository.TransferRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.bank.account_microservices.model.Account;


@Service
@RequiredArgsConstructor
public class TransferService {

    private final TransferRepository transferRepository;

    @Autowired
    private RestTemplate restTemplate;

    public Transfer createTransfer(Transfer transfer) {
        // Step 1: Call account-microservice to deduct balance
        String url = "http://ACCOUNT-MICROSERVICE/account/" + transfer.getSenderAccountId() + "/deduct/" + transfer.getAmount();
        Boolean result = restTemplate.postForObject(url, null, Boolean.class);

        if (result != null && result) {
            // Step 2: Save transfer
            return transferRepository.save(transfer);
        } else {
            throw new RuntimeException("Insufficient balance or deduction failed.");
        }
    }
    public boolean deductBalance(Long accountId, Double amount) {
        Account acc = accountRepository.findById(accountId).orElseThrow();
        if (acc.getBalance() >= amount) {
            acc.setBalance(acc.getBalance() - amount);
            accountRepository.save(acc);
            return true;
        }
        return false;
    }

}
